Go语言运算符
    运算符用于在程序运行时执行数学或逻辑运算。
    Go语言内置运算符由：
        算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符、其他运算符
1. 算术运算符
    以下列举了Go语言中的算术运算符，假定A的值为10， B的值为20
    +           相加      A + B = 30
    -           相减      A - B = -10
    *           相乘      A * B = 200
    /           相除      B / A = 2
    %           取余      B % A = 0
    ++          自增      A++ = 11
    --          自减      A-- = 9
2. 关系运算符
    以下列举了Go语言中的关系运算符，假定A的值为10，B的值为20
    ==          检查两个值是否相等，相等为True，不相等为False             (A == B) = False
    !=          检查两个数是否不等，不相等为True，相等为False             (A != B) = True
    >           检查左边是否大于右边                                     (A > B) = False
    <           检查左边是否小于右边                                     (A < B) = True
    >=          检查左边是否大于等于右边                                 (A >= B) = False
    <=          检查左边是否小于等于右边                                 (A <= B) = True
3. 逻辑运算符
    以下列举了Go语言中的逻辑运算符，假定A为True，B为False
    &&      逻辑AND运算符，两边同时为True则为True，否则为false            (A && B) = False
    ||      逻辑OR运算符，有一边为True则为True，两天全为False则为False     (A || B) = True
    !       逻辑NOT运算符，取反操作                                       (!A) = B； (!B) = A
4. 位运算符
    位运算符对整数在内存中的二进制位进行操作。
    以下列举了Go语言中的位运算符， & | ^
    p       q       p&q     p|q     p^q
    0       0       0       0       0
    0       1       0       1       1
    1       1       1       1       0
    1       0       0       1       1
    假定A=60，B=13；其二进制数转换位：
    A   = 0 0 1 1  1 1 0 0
    B   = 0 0 0 0  1 1 0 1
    --------------------
    A&B = 0 0 0 0  1 1 0 0
    A|B = 0 0 1 1  1 1 0 1
    A^B = 0 0 1 1  0 0 0 1
    Go语言支持的位运算符如下表所示。假定A=60，B=13：
    &       按位与运算符&是双目运算符。其功能是参与运算的两数各对应的二进位相与。             (A&B) = 12，二进制位：0000 1100
    |       按位或运算符|是双目运算符。其功能是参与运算的两数各对应的二进位相或。             (A|B) = 61，二进制位：0011 1101
    ^       按位异或运算符^是双目运算符。其功能是参与运算的两数各对应的二进位相异或。         (A^B) = 49，二进制位：0011 0001
    <<      左移运算符<<是双目运算符。左移n位就是乘以2的n次方。                             (A<<2) = 240，二进制位：1111 0000
    >>      右移运算符>>是双目运算符。右移n位就是除以2的n次方。                             (A>>2) = 15，二进制位：0000 1111
5. 赋值运算符
    以下列举了Go语言中的赋值运算符。
    =       简单的赋值运算符，将一个表达式的值赋值给一个左值        C = A + B，将 A + B赋值给C
    +=      相加后再赋值                                          A += B相当于 A = A + B
    -=      相减后再赋值                                          A -= B相当于 A = A - B
    *=      相乘后再赋值                                          A *= B相当于 A = A * B
    /=      相除后再赋值                                          A /= B相当于 A = A / B
    %=      取余后再赋值                                          A %= B相当于 A = A % B
    <<=     左移后再赋值                                          A <<= 2相当于 A = A << 2
    >>=     右移后再赋值                                          A >>= 2相当于 A = A >> 2
    &=      按位与后再赋值                                        A &= 2相当于 A = A & 2
    |=      按位或后再赋值                                        A |= 2相当于 A = A | 2
    ^=      按位异或后再赋值                                      A ^= 2相当于 A = A ^ 2
6. 其他运算符
    以下列举了Go语言中的其他运算符。
    &       返回变量的存储地址           &a  将给出 变量a的实际地址
    *       指针变量                    *a  是一个指针变量
    例子见GoVariable8.go
    指针变量 * 和地址值 & 的区别：指针变量保存的是一个地址值，会分配独立的内存来存储一个整型数字。 *a 相当于取a的值   &a 相当于取a的内存地址值。

7. 运算符优先级
    有些运算符拥有较高的优先级，二院运算符的运算方向均是从左至右。下面列出了所有运算符以及他们的优先级，由上至下代表优先级由高到低。
    5           *  /  %  <<  >> &  &  ^
    4           +  -  |  ^
    3           ==  !=  <  <=  >=
    2           &&
    1           ||
    除此之外，我们还可以使用个括号累临时提升某个表达式的整体运算优先级

注意：
    Go的自增，自减只能作为表达式使用，而不能用于赋值语句。
    a++     //这是允许的，类似 a = a + 1
    a--     //与 a++相似
    a = a++ //这是不允许的，会编译出错