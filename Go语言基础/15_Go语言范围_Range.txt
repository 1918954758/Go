Go语言范围
    Go语言中range关键字用于for循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回key-value对
    实例：
    package main
    import "fmt"
    func main() {
    	//使用range去求一个slice的和。使用数组和这个很类似
    	nums := []int{1, 2, 3}
    	summ := 0
    	for _, numm := range nums {
    		summ += numm
    	}
    	fmt.Println("summ : ", summ)
    	//在数组上使用range将传入index和值两个变量。上面那个例子我们不需要使用钙元素的序号，所以我们使用空白符"_"省略了。有时候我们确实需要知道他的索引。
    	for i, num := range nums {
    		if num == 3 {
    			fmt.Println("index : ", i)
    		}
    	}

    	//range也可以用在map的键值对上
    	kvs := map[string]string{"a":"apple", "b":"banana"}
    	for k, v := range kvs {
    		fmt.Printf("%s - %s\n", k, v)
    	}

    	//range也可以用来枚举Unicode字符串。第一个参数是字符的索引，第二个是字符(Unicode的值)本身。
    	for i, c := range "this is a string" {
    		fmt.Printf("%d - %d\n", i, c)
    	}
    }
扩展：
    a. 简单的循环
        package main
        import "fmt"
        func main() {
            nums := []int{1, 2, 3}
            length := 0
            for range nums {
                length++
            }
            fmt.Println(length)
        }
    b. 循环键值对
        package main
        import "fmt"
        func main() {
            nums := []int{1, 2, 3, 4}
            for i, num := range nums {
                fmt.Println("索引是%d， 长度是%d\n", i, num)
            }
        }
    c. 通过range循环参数列表
        package main
        import (
            "fmt"
            "os"
        )
        func main() {
            fmt.Println(len(os.Args))
            for _, arg := range os.Args {
                fmt.Println(arg)
            }
        }
        //output=> C:\Users\Administrator\AppData\Local\Temp\___go_build_range_go.exe