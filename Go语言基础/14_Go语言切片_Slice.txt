Go语言切片(Slice)("动态数组")
    Go语言切片是对数组的抽象。
    Go语言数组的长度不可改变，在特定场景中这样的集合就不太实用，Go中提供了一种灵活，功能强悍的内置类型切片("动态数组")，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。
1. 定义切片
    我们可以声明一个未指定大小的数组来定义切片：
        var identifier []type
    切片不需要说明长度。
    或使用make()函数来创建切片：
        var slice1 []type = make([]type, length)
        或简写为：
        slice1 := make([]type, length)
    也可以指定容量，其中capacity为可选参数：
        make([]T, length, capacity)
        这里的length是数组的长度并且也是切片的初始长度。
2. 切片初始化
    s := [] int {1, 2, 3}
    直接初始化切片，[]表示是切片类型， {1, 2, 3}初始化值一次是1， 2， 3，其cap = len = 3
    s := arr[:]
    初始化切片s是数组arr的引用。
    s := arr[startIndex:endIndex]
    将arr中从下表startIndex到endIndex-1下的元素创建为一个新的切片
    s := arr[startIndex:]
    默认endIndex时，将表示一直到arr的最后一个元素。
    s := arr[:endIndex]
    默认startIndex时，将表示从arr的第一个元素开始。
    s1 := make([]int, len, cap)
    通过内置函数make()初始化切片s，[]int表示为其元素类型为int的切片
3. len() 和 cap()函数
    切片是可索引的，并且可以有len()方法获取长度。
    切片提供了计算容量的方法cap()，cap()可以测量切片最长可以达到多少。
    实例1：
    package main
    import "fmt"
    func main () {
        var numbers = make([]int, 3, 5)
        printSlice(numbers)
    }
    func printSlice (x []int) {
        fmt.Printf("len = %d cap = %d slice = %v\n", len(x), cap(x), x)
    }
    //output=> len = 3 cap = 5 slice = [0 0 0]
    实例2：
    package main
    import "fmt"
    func main () {
        slice := make([]int, 10, 20)    //定义slice的len=10，cap=20
        fmt.Printf("%p \n", slice) //slice指针地址
        fmt.Printf("%d %d\n", len(slice), cap(slice))

        slice = append(slice, 1, 2, 3, 4, 5)
        fmt.Printf("%p \n", slice)  //没超过底层数组大小，地址不变
        fmt.Printf("%d %d\n", len(slice), cap(slice))

        slice = append(slice, 6, 7, 8, 9, 10)
        fmt.Printf("%p \n", slice)  //没超过底层数组大小，地址不变
        fmt.Printf("%d %d\n", len(slice), cap(slice))

        slice = append(slice, 11, 12, 13)
        fmt.Printf("%p \n", slice)  //超过底层数组大小，地址改变
        fmt.Printf("%d %d\n", len(slice), cap(slice))
    }
    //output=> 0xc000104000
               10 20
               0xc000104000
               15 20
               0xc000104000
               20 20
               0xc000106000
               23 40
    总结切片len()和cap():
        容量表示底层数组的大小，长度是我们可以使用的大小。
        当我们用append扩展长度时，如果新的长度小于底层容量数组的大小，不会更换底层数组，否则，Go会重新申请一个底层数组，拷贝这边的值过去，把原来的数组丢掉，也就是说，容量的用途是：在数组拷贝和内存申请的消耗与内存占比之间提供一个权衡。
        而长度，则是为了帮助我们限制切片可用成员的数量，提供边界查询的。所以用make申请好空间后，需要注意不要越界(也就是不要超过len)
        扩容，底层数组成倍数进行扩容。
4. 空切片(nil)
    一个切片在未初始化之前默认为nil，长度为0
    实例：
    package main
    import "fmt"
    func main () {
        var numbers []int
        printSlice(numbers)
        if numbers == nil {
            fmt.Pringf("切片是空的")
        }
    }
    func printSlice (x []int) {
        fmt.Printf("len = %d  cap = %d  slice = %v\n", len(x), cap(x), x)
    }
    //output=> len = 0  cap = 0  slice = []
               切片numbers是空的
5. 切片的截取(和Java一样，左闭右开区间拿值)
    可以通过设置下限及上限来设置截取切片[lower-bound:upper-bound]，实例如下：
    package main
    import "fmt"
    func main() {
    	//创建切片
    	numbers := []int{0, 1, 2, 3, 4, 5, 6, 7, 8}
    	printSlice1(numbers)

    	//打印原始切片
    	fmt.Println("numbers = ", numbers)
    	fmt.Printf("numbers = %p\n", numbers)
    	//打印子切片，从索引1(包含)到索引4(不包含)
    	fmt.Println("numbers[1:4] = ", numbers[1:4])
    	//默认下限为0
    	fmt.Println("numbers[:3] = ", numbers[:3])
    	//默认上限为len(s)
    	fmt.Println("numbers[4:] = ", numbers[4:])

    	numbers1 := make([]int, 0, 5)
    	fmt.Println("numbers1 = ", numbers1)
    	fmt.Printf("numbers1 = %p\n", numbers1)
    	printSlice1(numbers1)
    	//打印子切片从索引0(包含)到索引2(不包含)
    	number2 := numbers[:2]
    	printSlice1(number2)
    	//打印子切片从索引2(包含)到索引5(不包含)
    	number3 := numbers[2:5]
    	printSlice1(number3)
    }
    func printSlice1(x []int) {
    	fmt.Printf("len = %d  cap = %d  slice = %v\n", len(x), cap(x), x)
    }
    //output=> len = 9  cap = 9  slice = [0 1 2 3 4 5 6 7 8]
               numbers =  [0 1 2 3 4 5 6 7 8]
               numbers = 0xc0000140f0
               numbers[1:4] =  [1 2 3]
               numbers[:3] =  [0 1 2]
               numbers[4:] =  [4 5 6 7 8]
               numbers1 =  []
               numbers1 = 0xc00000c300
               len = 0  cap = 5  slice = []
               len = 2  cap = 9  slice = [0 1]
               len = 3  cap = 7  slice = [2 3 4]
6. append() 和 copy()
    如果增加切片的容量，我们必须创建一个新的更大的切片，并把源根片的内容都拷贝过来。
    下面的代码描述了从拷贝切片的copy方法和想切片追加新元素的append方法。
    package main
    import "fmt"
    func main() {
        var numbers []int
        printSlice(numbers)

        //允许追加空切片
        numbers = append(numbers, 0)
        printSlice(numbers)

        //向切片添加一个元素
        numbers = append(numbers, 1)
        printSlice(numbers)

        //同时添加多个元素
        numbers = append(numbers, 2, 3, 4)
        printSlice(numbers)

        //创建切片numbers1是之前切片的两倍容量
        numbers1 := make([]int len(numbers), (cap(numbers))*2)
        printSlice(numbers1)

        //拷贝numbers的内容到numbers1
        copy(numbers1, numbers)
        printSlice(numbers1)
    }
    func printSlice(x []int) {
        fmt.Printf("len = %d  cap = %d  slice = %v\n", len(x), cap(x), x)
    }
    //output=> len = 0  cap = 0  slice = []
               len = 1  cap = 1  slice = [0]
               len = 2  cap = 2  slice = [0 1]
               len = 5  cap = 6  slice = [0 1 2 3 4]
               len = 6  cap = 12  slice = [0 0 0 0 0 0]
               len = 6  cap = 12  slice = [0 1 2 3 4 0]
扩展：
    len切片 <= cap切片 <= len数组