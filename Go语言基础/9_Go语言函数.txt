Go语言函数
    函数式基本的代码块，用于执行一个任务。
    Go语言最少有个main()函数。
    我们可以通过函数来划分不同功能，逻辑上，每个函数执行的是指定的任务。
    函数的声明告诉了编译器函数的名称，返回类型，和参数。
    Go语言标准库提供了多种可动用的内置的函数。例如，len()函数可以接受不同类型参数，并返回该类型的长度。如果我们传入的是字符串，则返回字符串的长度，如果传入的是数组，则返回数组中包含的元素个数。
1. 函数的定义
    语法格式：
        func function_name ([parameter list]) [return_types] {
            函数体
        }
    解析函数语法：
        a. func： 函数由func开始声明
        b. function_name：函数名称，函数名和参数列表一起构成了函数签名。(这个和Java一样啊)
        c. parameter list：参数列表，参数就像一个占位符，当函数被调用时，我们可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说参数也可以不包含参数。
        d. return_types：返回类型，函数返回一列值。return_types是该列值得数据类型。有些功能不需要返回值，这种情况下return_types不是必须的。
        e. 函数体：函数定义的代码集合。
    例子：一下实例为max()函数的代码，该函数传入两个整型参数num1和num2，并返回这两个参数的最大值:
    func main (num1, num2 int) int {
        var result int
        if (num1 > num2) {
             result = num1
        } else {
            result = num2
        }
        return result
    }
2. 函数的调用
    当创建函数时，我们定义了函数需要做什么，通过调用该函数来执行指定任务。
    调用函数，象函数传递参数，并返回值，例如：
        package main
        import "fmt"
        func main () {
            //定义局部变量
            var a int = 100
            var b int = 200
            var ret int

            //调用函数并返回最大值
            ret = max(a, b)
            fmt.Printf("最大值是： %d\n", ret)
        }
        func main (num1, num2 int) int {
            var result int
            if (num1 > num2) {
                 result = num1
            } else {
                result = num2
            }
            return result
        }
3. 函数返回多个值
    Go函数可以返回多个值，例如：
        package main
        import "fmt"
        func swap (x, y string) (string, string) {
            return y, x
        }
        func main () {
            a, b := swap("Google", "Runoob")
            fmt.Println(a, b)
        }
4. 函数参数
    函数如果使用参数，该变量可称为函数的形参。
    形参就像定义在函数体内的局部变量。
    调用函数，可以通过两种方式来传递参数：
        a. 值传递
            值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。
        b. 引用传递
            引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。
        默认情况下，Go语言使用的是值传递，即在调用过程中不会影响到实际参数。
5. 函数用法
    a. 函数作为另外一个函数的实参
        Go语言可以很灵活的创建函数，并作为另外一个函数的实参。以下实例中我们在定义的函数中初始化一个变量，该函数仅仅是为了使用内置函数math.sqrt()：
        package main
        import "fmt"
        func main () {
            //声明函数变量
            getSquareRoot := func(x float64) float64 {
                return math.Sqrt(x)
            }
            //使用函数
            fmt.Println(getSquareRoot(9))
        }
    b.闭包，闭包是匿名函数，可在动态编程中使用
        Go语言支持匿名函数，可作为闭包。匿名函数是一个“内联”语句或表达式。匿名函数的优越性在于可以直接使用函数内的变量，不必声明。
        以下实例中，我们创建了函数getSequence()，返回另外一个函数。该函数的目的是在闭包中递增i变量，代码如下：
        package main
        import "fmt"
        func getSequence () func () int {
            i := 0
            return func () int {
                i =+ 1
                return i
            }
        }
        外层函数的返回值可以理解为 func () int
        内层函数的返回值可以理解为int
        也就是说，整个函数getSequence()的返回值，即是内层函数的返回值 int
    c.方法，方法就是一个包含了接受者的函数
        Go语言中同时有函数和方法。一个方法就是一个包含了接受者的函数。接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。
        语法：
            func (variable_name variable_date_type) function_name () [return_type] {
                //函数体
            }
        例如：
            package main
            import {
                fmt
            }
            //定义结构体
            type Circle struct {
                radius float64
            }
            //该method属于Circle类型对象中的方法
            func (c Circle) getArea () float64 {
                //c.radius即为Circle类型对象中的属性
                return 3.14 * c.radius * c.radius
            }
            func main () {
                var c Circle
                c.radius = 10.00
                fmt.Printf("圆的面积 = %f", c.getArea())
            }