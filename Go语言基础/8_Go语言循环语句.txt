Go循环语句
    在不少实际问题中有许多具有规律性的重复操作，因此在程序中就需要重复执行某些语句。
1. for循环
    语法：
        1). for init; condition; post {}    类似于Java的for
        2). for condition {}                类似于Java的while
        3). for {}                          类似于for(;;)
    说明：
        init        一般为复制表达式，给控制变量赋初值
        condition   关系表达式或逻辑表达式，循环控制条件
        post        一般为复制表达式，给控制变量增量或减量
    for语句执行过程如下：
        1). 先对表达式1赋初值
        2). 判断复制表达式init是否满足给定条件，若其值为真，满足循环条件，则执行循环体内语句，然后执行post，进入第二次循环，再判断condition；否则判断condition的值为假，不满足条件，就终止for循环，执行循环体外语句。

    for循环的range格式可以对slice、map、数组、字符串等进行迭代循环。格式如下：
        for key, value := range oldMap {
            newMap[key] = value
        }
    例子1：
        package main
        import "fmt"
        func main () {
            sum := 0
            for i := 0; i <= 10; i++ {
                sum += 1
            }
            fmt.Println(sum)
        }
        init和post是可选参数，我们可以直接省略它，类似while语句
        一下实力在sum小于10的时候计算sum自相加后的值：
        package main
        import "fmt"
        func main () {
            sum := 1
            for ; sum <= 10; {
                sum += sum
            }
            fmt.Println(sum)
            //也可写成这样：
            for sum <= 10 {
                sum += sum
            }
            fmt.Println(sum)
        }
    例子2：死循环
        package main
        import "fmt"
        func main(){
            sum := 0
            for {
                sum++   //无限循环下去，可以使用 ctrl+c来终止
            }
            fmt.Println(sum)   //永远执行不到这里
        }
2. For-each range循环
    这种格式对数组、切片、字符串等进行迭代输出元素：
        package main
        import "fmt"
        func main () {
            strings := []string{"google", "runoob"}
            for i, s := range strings {
                fmt.Println(s, i)
            }

            numbers := [6]int{1, 2, 3, 5}
            for i, x := range numbers {
                fmt.Printf("第 %d 位 x 的值 = %d\n", i, x)
            }
        }

3. Go语言循环嵌套
    语法：
        for [condition | (init; condition; increment) | Range] {
            for [condition | (init; condition; increment) | Range] {
                statement(s)
            }
            statement(s)
        }
    例子：利用循环嵌套输出2到100之间的素数：
        package main
        import "fmt"
        func main () {
            //定义局部变量
            var i, j int
            for i = 2; i < 100; i++ {
                for j = 2; j <= (i / j); j++ {
                    if (i % j == 0) {
                        break; // 如果发现因子，则不是素数
                    }
                }
                if (j > (i / j)) {
                    fmt.Printf("%e  是素数\n", i)
                }
            }
        }
4. 循环控制语句
    循环控制语句可以控制循环体内语句的执行过程。
    Go语言支持一下几种循环控制语句：
        break语句         经常用于终端当前for循环或跳出switch语句
        continue语句      跳过当前循环的剩余语句，然后继续进行下一轮循环
        goto语句          将控制转移到被标记的语句
    a. break语句
        Go语言break语句可以用于以下两方面：
            用于循环语句中跳出循环，并开始执行循环之后的语句。
            break在switch(开关语句)中在执行一条case后跳出语句的作用。
            在多重循环中，可以用标号label标出想break的循环。
            语法：
                break
        例子1：在变量a 大于15的时候跳出循环
            package main
            import "fmt"
            func main () {
                var a int = 10
                for a < 20 {
                    fmt.Printf("a的值为： %d\n", a)
                    if a > 15 {
                        break
                    }
                }
            }
        例子2：一下实力演示了使用标记和不使用标记的区别：
            package main
            import "fmt"
            func main () {
                //不使用标记
                fmt.Println("---- break ----")
                for i := 1; i <= 3; i++ {
                    fmt.Printf("i: %d\n", i)
                    for i2 := 11; i2 <= 13; i2++ {
                        fmt.Printf("i2: %d\n", i2)
                        break
                    }
                }
                //使用标记
                fmt.Println("---- break label ----")
                re:
                    for i := 1; i <= 3; i++ {
                        fmt.Printf("i: %d\n", i)
                        for i2 := 11; i2 < 13; i2++ {
                            fmt.Printf("i2: %d\n",i2)
                            break re
                        }
                    }
            }
    b. continue语句
        Go语言的continue语句有点像break语句。但是continue不是跳出循环，而是跳过当前循环执行下一次循环语句。
        for循环中，执行continue语句会触发for增量语句的执行。
        在多重循环中，可以用标号label标出想continue的循环。
        语法：
            continue
        例子1：在变量a等于15的时候跳过本次循环执行下一次循环：
        package main
        import "fmt"
        func main () {
            var a int = 10
            for a < 20 {
                if a == 15 {
                    a++
                    continue
                }
                fmt.Println(a)
                a++
            }
        }
        例子2：一下实力有多重循环，演示了使用标记和不使用标记的区别：
        package main
        import "fmt"
        func main () {
            //不使用标记label
            fmt.Println("---- continue ----")
            for i := 1; i <= 3; i++ {
                fmt.Printf("i : %d\n", i)
                for i2 := 11; i2 <= 13; i2++ {
                    fmt.Printf("i2 : %d\n", i2)
                    continue
                }
            }

            //使用标记label
            re:
                for i := 1; i <= 3; i++ {
                    fmt.Printf("i : %d\n", i)
                    for i2 := 11; i2 <= 13; i2++ {
                        fmt.Printf("i2 : %d\n", i2)
                        continue re
                    }
                }
        }
    c. goto语句
        Go语言的goto语句可以无条件的转移到过程中指定的行。
        goto语句通常与条件语句配合使用。可用来实现条件转移，构成循环，跳出循环体等功能。
        但是，在结构化程设计中一般不主张使用goto语句，以免造成程序流程混轮，使理解和调试程序都产生困难。
        语法：
            goto label:
            ..
            .
            label: statement
        例子：在变量a等于15的时候跳过本次循环并回到勋魂开始语句LABEL处：
        package main
        import "fmt"
        func main () {
            var a int = 10
            LOOP: for a < 20 {
                if a == 15 {
                    a++
                    goto LOOP
                }
                fmt.Printf("a 的值为： %d\n", a)
                a==
            }
        }
5. 无限循环
    如果循中条件语句永远不为false则会进行无限循环，我们可以通过for循环语句中只设置一个条件表达式来执行无限循环：
    package main
    import "fmt"
    func main () {
        a := 1
        for true {
            fmt.Printf("这是无限循环。 %d \n", a++)
        }
    }