Go语言指针
    Go语言中指针是很容易学习的，Go语言中使用指针可以更简单的执行一些任务。
    接下来，我们一步一步来学习Go语言指针。
    其实，变量也是一种占位符，用于引用计算机内存地址。
    Go语言的取地址符是 & ，放到一个变量前使用就会返回相应变量的内存地址。
    以下实例演示变量在内存中的地址：
    package main
    import "fmt"
    func main () {
        var a int = 10
        fmt.Printf("变量的地址：%x\n", &a)
    }
    //output=> 变量的地址：c00000a0a0

    接下来学习指针。
1. 什么是指针
    一个指针变量指向了一个值得内存地址。
    类似于变量和常量，在使用指针前我们需要声明指针。格式如下：
        var var_name *var_type
        var_type 为指针类型
        var_name 为指针变量名
        * 号用于指定变量是作为一个指针。
    以下是有效的指针声明：
        var ip *int     //指向整型
        var fp *float32 //指向浮点型
2. 如何使用指针
    指针使用流程：
        a. 定义指针变量
        b. 为指针变量赋值
        c. 访问指针变量中指向地址的值
    在指针类型前面加上*号(前缀)来获取指针所指向的内容。
    package main
    import "fmt"
    func main () {
        var a int = 20      // 声明实际变量
        var ip *int         //声明指针变量
        ip = &a             //指针变量的存储地址

        fmt.Printf("a 变量的地址是：%x\n", &a)
        //指针变量的存储地址
        fmt.Printf("ip 变量储存的指针地址： %x\n", ip)
        //使用指针访问值
        fmt.Printf("*ip 变量的值：%d\n", *ip)
    }
    //output=> a 变量的地址是：：c00000a0a0
               ip 变量储存的指针地址：c00000a0a0
               *ip 变量的值：10
3. Go空指针
    当一个指针被定义后没有分配到任何变量时，它的值为nil。
    nil指针也被称为空指针
    nil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或控制。
    一个指针变量通常缩写为 ptr。
    package main
    import "fmt"
    func main () {
        var ptr *int
        fmt.Printf("ptr的值为：%x\n", *ptr)
    }
    //output=> ptr 的值为：0
    判断空指针：
    if ptr != nil { ... } - 不是空指针
    if ptr == nil { ... } - 是空指针
4. Go指针更多内容
    a. Go指针数组                   定义一个指针数组来存储地址
        例子：
            package main
            import "fmt"
            const MAX int = 3
            func main () {
                a := []int{10, 100, 200}
                var i int
                for i = 0; i < MAX; i++ {
                    fmt.Printf("a[%d] = %d\n", i, a[i])
                }
            }
        有一种情况，我们可能需要保存数组，这样我们就需要使用到指针。
        以下声明了整型指针数组：
            var ptr [MAX]*int
        ptr为整型指针数组。因此每个元素都指向了一个值。以下实例的三个整数将存储在指针数组中：
            package main
            import "fmt"
            const MAX int = 3
            func main () {
                a := [MAX]int{10, 100, 200}
                var ptr [MAX]*int
                for i := 0; i < MAX; i++ {
                    //将数组a的值得内存地址分别对应存储到指针数组ptr中
                    ptr[i] = &a[i]
                }
                //取指针数组中的值
                for j := 0; j < MAX; j++ {
                    fmt.Printf("a[%d] = %d\n", i, *ptr[i])
                }
            }
        注意：创建指针数组的时候，不适合用range循环。
            package main
            import "fmt"
            const MAX int = 3
            func main () {
                number := [MAX]int{5, 6, 7}
                var ptrs [number]*int
                //错误写法
                for i, x := range &number {
                    //将number数组的值得内存地址赋值给ptrs
                    ptrs[i] = &x//错误做法
                }
                //其他写法1：
                for i, x := range &number {
                    temp := x//但是也有缺陷，这样的结果索然正确，但是内存地址已经不是原来的内存地址了
                    ptrs[i] = &x
                }
                //正确写法2：
                for i, _ := range number {
                    ptrs[i] = &number[i] //这个是最正确的写法，这样值正确，地址也正确
                }
                for i, x := range ptrs {
                    fmt.Printf("指针数组：索引：%d  值：%d  值得内存地址：%d\n", i, *x, x)
                }
            }
            //output=> 指针数组： 索引：0  值：7  值得内存地址：824633761952
                       指针数组： 索引：1  值：7  值得内存地址：824633761952
                       指针数组： 索引：2  值：7  值得内存地址：824633761952
            以上结果中我们发现内存地址都一样，而且值也一样。怎么回事？
            原因是：x临时变量仅被声明一次，伺候都是将迭代number出的值赋值给x，x变量的内存地址始终未变，这样再将x的地址发送个ptrs数组，自然也是相同的。
            正确的做法如下或者如上面代码中给出的正确做法，都可：
            package main
            import "fmt"
            const MAX int = 3
            func main () {
                number := [MAX]int{5, 6, 7}
                var ptrs [MAX]*int
                for i := 0; i < MAX; i++ {
                    //将number数组的值得内存地址赋值给ptrs
                    ptrs[i] = &number[i]
                }
                for i := 0; i < MAX; i++ {
                    fmt.Printf("指针数组：索引：%d  值：%d  值得内存地址：%d\n", i, *ptrs[i], ptrs[i])
                }
            }
    b. Go指向指针的指针             Go支持指向指针的指针
        Address(Pointer) --> Address(Pointer) --> Value(Variable)
        定义
        var ptr **int
    c. Go向函数传递指针参数         通过引用或地址传参，在函数调用时可以改变其值
        Go语言允许想函数传递指针，只需要在函数定义的参数上设置为指针类型即可。
        以下实例演示了如何向函数传递指针，并在函数调用后修改函数内的值：
        package main
        import "fmt"
        func main () {
            //定义局部变量
            var a int = 100
            vat b int = 200
            fmt.Print("\n---- 交换前 ---\n")
            fmt.Printf("%d\t%d", a, b)
            swap(&a, &b)
            fmt.Print("\n---- 交换后 ---\n")
            fmt.Printf("%d\t%d", a, b)
        }
        func swap (x *int, y *int) {
            var temp *int
            temp = *x //保存 x 地址的值
            *x = *y   //将 y 赋值给 x
            *y = temp //将temp 赋值给y
        }
        func swap (x *int, y *int) {
            *x, *y = *y, *x
        }
        //output=> ---- 交换前 ---
                   100	200
                   ---- 交换后 ---
                   200	100