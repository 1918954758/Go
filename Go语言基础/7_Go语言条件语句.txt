Go语言的条件语句
    条件语句需要开发者通过指定一个或多个条件，并通过测试条件是否位true来决定是否执行指定语句，并在条件为false的情况在执行另外的语句。
Go语言提供了以下几种条件判断语句：
    if语句                    if语句 由一个布尔表达式后紧跟一个或多个语句组成
    if ... else ... 语句      if语句 后可以使用可选的 else语句 ，else语句中的表达式再布尔表达式位false时执行
    if嵌套语句                可以再if或else if语句中嵌入一个或多个if或else if语句
    switch语句                switch语句用于基于不同的条件执行不同的动作
    select语句                select语句类似于switch语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，知道有case可运行

    注意：Go语言没有三目运算符， 如Java的 a == b ? "1" : "0"
1. if语句
    语法：
        if 布尔表达式 {
            /* 在布尔表达式为true时执行 */
        }
    package main
    import "fmt"
    func main () {
        var a int = 10
        if a < 20 {
            fmt.Printf("a 小于 20 \n")
        }
        fmt.Printf("a 的值为：%d\n", a)
    }
2. if ... else ... 语句
    语法：
        if 布尔表达式 {
            /* 在布尔表达式为true时执行 */
        } else {
            /* 在布尔表达式为false时执行 */
        }
    package main
    import "fmt"
    func main () {
        var a int = 100
        if a < 20 {
            fmt.Printf("a 小于 20\n")
        } else {
            fmt.Printf("a 大于等于 20\n")
        }
        fmt.Printf("a 的值为：%d\n", a)
    }
3. if或者else if嵌套
    语法：
        if 布尔表达式2 {
            /* 在布尔表达式1位true时执行 */
            if 布尔表达式2 {
                /* 在布尔表达式2位true时执行 */
            }
        }
    package main
    import "fmt"
    func main () {
        var a int
        var b int
        fmt.Printf("请输入密码：  \n")
        fmt.Scan(&a)
        if a == 123456 {
            fmt.Printf("请再次输入密码：")
            fmt.Scan(&b)
            if b == 123456 {
                fmt.Printf("密码正确，门锁已开")
            } else {
                fmt.Printf("非法入侵，已自动报警")
            }
        } else {
            fmt.Printf("非法入侵，已自动报警")
        }
    }
4. switch语句
    语法：
        switch var1 {
            case val1:
                ...
            case val2:
                ...
            case val3:
                ...
            default:
                ...
        }
    switch语句用于基于不同条件执行不同动作，每一个case分支都是唯一的，从上至下逐一测试，直到匹配为止。
    switch语句执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加break。
    switch默认情况下case最后自带break语句，匹配成功后就不会执行其他case，如果我们需要执行后面的case，可以使用 fallthrough
    例子，见SwitchDemo.go
    4.1 Type Switch
        语法：
            switch x.(type) {
                case (type):
                    statement(s)
                case (type):
                    statement(s)
                ...
                default:/* 可选 */
                    statement(s)
            }
            例子，见Type_Switch.go
    4.2 fallthrough
        使用fallthrough会强制执行后面的case语句，fallthrough不会判断下一条case的表达式结果是否为true。
        例子，见Fallthrough.go
        package main
        import "fmt"
        func main () {
        	switch {
        		case false:
        			fmt.Println("1. case条件语句为false")
        			fallthrough
        		case true:
        			fmt.Println("2. case条件语句为true")
        			fallthrough
        		case false:
        			fmt.Println("3. case条件语句为false")
        			fallthrough
        		case true:
        			fmt.Println("4. case条件语句为true")
        		case false:
        			fmt.Println("5. case条件语句为false")
        			fallthrough
        		default:
        			fmt.Println("6. 默认case")
        	}
        }
        //output=> 2. case条件语句为true
                   3. case条件语句为false
                   4. case条件语句为true
        从以上代码输出的记过可以看出：switch从第一个判断表达式为true的case开始执行，如果case带有fallthrough，程序会继续执行下一条case，且它不会判断下一个case的表达式是否为true
注意：
    1. switch支持多条件匹配
        switch {
            case 1, 2, 3, 4:
            default
        }
    2. 两个case之间不需要break来结束
    3. 如果想要执行多个case，可以使用fallthrough关键字，也可以使用break来结束
5. select
    语法：
        select {
            case commnunication clause:
                statement(s)
            case commnunication clause:
                statement(s)
            ...
            default:/* 可选 */
                statement(s)
        }
    select是Go语言中的一个控制结构，类似于用于通信的switch语句。每个case必须是一个通信操作，要么是发送要么是接受。
    select随机执行一个可运行的case。如果没有case可运行，他将阻塞，直到有case可运行。一个默认的子句应该总是可运行的。
    一下描述select语句的语法：
        每个case都必须是一个通信
        所有channel表达式都会被求值
        所有被发送的表达式都会被求值
        如果任意某个通信可以进行，他就执行，其他被忽略
        如果有多个case都可以运行，select会随机公平地选出一个执行。其他不会执行。否则
            如果有default子句，则执行该语句。
            如果没有default子句，select将阻塞，直到某个通信可以运行；Go不会重新对channel或值进行求值
    例子，见Select.go
    package main
    import "fmt"
    func main() {
    	var c1, c2, c3 chan int
    	var i1, i2 int
    	select {
    		case i1 = <- c1:
    			fmt.Printf("received ", i1, " from c1\n")
    		case c2 <- i2:
    			fmt.Printf("sent ", i2, " to c2\n")
    		case i3, ok := (<- c3): //same as : i3, ok := <- c3
    			if ok {
    				fmt.Printf("received ", i3, " from c3\n")
    			} else {
    				fmt.Printf("c3 is closed\n")
    			}
    		default:
    			fmt.Printf("no communication\n")
    	}
    }
    //output=> no communication
注意：select会循环检测条件，如果有满足则执行并退出，否则一直循环检测。
