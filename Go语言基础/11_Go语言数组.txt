Go语言数组
    Go语言提供了数组类型的数据结构。
    数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型，如整型、字符串或者自定义类型。
    相对于去声明number0,number1,number2,...,number99的变量，使用数组形式numbers[0],numbers[1],numbers[2],...,numbers[99]更加方便且易于扩展。
    数组元素可以通过索位置引来读取或者修改，索引位置从0开始，第一个元素索引位置为0，第二个元素索引位置为1，以此类推。

1. 声明数组
    Go语言数组声明需要制定元素类型及元素个数，语法如下：
    var variable_name [SIZE] variable_type
    以上为数组的唯一定义方式。例如以下定义了数组balance长度为10类型为float32：
    var balance [10] float32
2. 初始化数组
    var balance = [5] float32{1000.0, 2.0, 3.4, 7.0, 50.0}
    初始化数组中{}中的元素个数不能大于[]中的数字。
    如果忽略[]中的数字不设置数组大小，Go语言会根据元素的个数来设置数组的大小：
        var balance = [...] float32{1000.0, 2.0, 3.4, 7.0, 50.0}
        该实例与上面的例子是一样的，虽然没有设置数组大小
    取数组中的元素：
        balance[0] = 1000.0
3. 访问数组中的元素
    数组元素可以通过索引位置来读取。格式为数组名后加方括号，方括号中为索引位置的值。例如：
        var salary float32 = balance[4]
        以上实例读取了数组balance第5个元素的值。
    以下实例展示了数组的完整操作(声明、赋值、访问)：
        package main
        import "fmt"
        func main () {
            var n [10] int      //n是一个长度为10的数组
            //维数组n初始化元素
            for i := 1; i <= 10; i++ {
                n[i] = i + 100
            }

            //输出每个数组元素的值
            for j := 0; j < 10; j ++ {
                fmt.Println("Element[%d] = %d\n",j, n[j])
            }
        }
4. 更多内容
    数组对Go语言来说是非常重要的，以下我们将介绍数组更多的内容：
        a. 多维数组             Go语言支持多维数组，最简单的多维数组是二维数组
        b. 向函数传递数组       我们可以向函数传递数组参数