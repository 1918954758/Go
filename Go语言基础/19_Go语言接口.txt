Go语言接口
    Go语言提供了另外一种数据类型，即接口，它把所有具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口
    实例：
    //接口定义
    type interface_name interface {
        method_name1 [return type]
        method_name2 [return type]
        method_name3 [return type]
        ...
        method_namen [return type]
    }
    //定义结构体
    type struct_name struct {
        //variables
    }
    //实现接口的方法，即实现了该方法所在的接口
    func (struct_name_variable struct_name) method_namn() [return type] {
        //方法实现
    }
    ...
    func (struct_name_variable struct_name) method_namen() [return type] {
        //方法实现
    }
    解释：
        struct_name_variable        可以自由定义，用来调用结构体内的方法属性
        method_namen()              结构中的方法，实现了该方法也就是实现了方法实现了接口，括号中可以传递参数，如：method_namen(param type)
        return type                 实现接口方法返回数据类型

        如果想要通过接口方法修改属性，需要在传入指针的结构体才可以，即：func (a *struct_type) method_name() return_type {}

    实例：
    package main
    import "fmt"

    //定义接口 Phone
    type Phone interface {
        call()
    }

    //定义结构体1
    type NokiaPhone struct {

    }
    //定义结构体2
    type IPhone struct {

    }
    //实现接口的方法，即实现了方法所在的接口
    func (nokiaPhone NokiaPhone) call() {
        fmt.Println("I am Nokia, I can call you!")
    }
    //实现接口的方法，即实现了方法所在的接口
    func (iPhone IPhone) call() {
        fmt.Println("I am iPhone, I can call you!")
    }

    func main() {
        var phone Phone
        phone = new(NokiaPhone)
        phone.call()

        phone = new(IPhone)
        phone.call()
    }
    //output=> I am astruct, I can call you!
               I am bstruct, I can call you!
