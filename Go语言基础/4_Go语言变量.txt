Go语言变量
    变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。
    变量可以通过变量名访问。
    Go语言变量名由字母、数字、下划线组成，其中首个字符不能位数字。
    声明变量的一般形式是使用var关键字：
        var indentifier type
    可以一次声明多个变量：
        var indentifier1, indentifier2 type
    例子：
        package main
        import "fmt"
        func main(){
            var a string = "Runoob"
            fmt.Println(a)

            var b, c int = 1, 2
            fmt.Println(b, c)
        }
1. 声明变量
    第一种：指定变量类型，如果没有初始化，则变量默认值位零
        var v_name v_type
        v_name = value
        零值就是变量没有做初始化时，系统默认值。
    例子：
        package main
        import "fmt"
        func main(){
            //声明一个变量并初始化
            var a = "Runoob"
            fmt.Println(a)

            //没有初始化就为零值
            var b int
            fmt.Println(b)

            //bool零值位false
            var c bool
            fmt.Println(c)
        }
    数值类型(包括complex64/128)为0
    布尔类型为false
    字符串为""(空字符串)
    以下几种类型为nil:
        var a *int
        var a []int
        var a map[string] int
        var a chan int
        var a func(string) int
        var a error   //error是接口
    第二种：根据值自动判断数据类型
        var v_name = value
    例：
        package main
        import "fmt"
        func main(){
            var d = true
            fmt.Println(d)
        }
        output=> true
    第三种：省略var，注意 := 左侧如果没有声明新的变量，就产生编译错误，格式：
        v_name := value
    例：
        var intVal int
        intVal += 1  //这时候会产生编译错误
        intVal, intVale1 := 1, 2   //此时不会产生编译错误，因为由新变量intVal1
    :=   是一个声明语句
    可以将var f string = "Runoob"简写为 f := "Runoob"
    例：
        package main
        import "fmt"
        func main(){
            f := "Runoob"   //var f string = "Runoob"
            fmt.Println(f)
        }
2. 多变量声明
    //类型相同的多个变量，非全局变量
    var vname1, vname2, vname3 type
    vname1, vname2, vname3 = v1, v2, v3
    //同Python很像，不需要显示声明变量的类型，自动推断
    var vname1, vname2, vname3 = v1, v2, v3
    //出现在 := 左侧的变量不应该是已被声明过的变量，否则会编译不通过
    vname1, vname2, vname3, vnewname := v1, v2, v3, v4

    //因式分解关键字的写法一般用于声明全局变量
    var (
        vname1 v_type1
        vname2 v_type2
    )
3. 值类型和引用类型
    所有像int、float、bool和string这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值
    当使用 = 将一个变量的值赋值给另一个变量时，如：i = 7; j = 7;，实际上是在内存中将i的值进行了拷贝
    我们可以使用&i来获取变量i的内存地址，如：0xf840000040(每次的地址都可能不一样)。值类型的变量的值存储在栈中。
    内存地址会根据机器的不同而不同，甚至相同的程序在不同的机器上执行后也会由不同的内存地址。因为每台机器可能由不同的存储器布局，并且位置分配有可能不同。

    更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存。
    一个引用类型的变量r1存储的是r1的值所在的内存地址(数字)，或内存地址中第一个字所对应的位置。
    也就是说，引用类型a的值为1，引用类型b的值也为1，那么a和b在内存中对应的值就是一个，只是a和b都指的是1的内存地址而已。
    a和b的这个内存地址称之为指针，这个指针实际上也被存储在另外的某一个值中。
    同一个引用类型的指针指向的多个字可以是在连续的内存地址中(内存布局是连续的)，这也是计算效率最高的一种存储形式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址。
    当使用赋值语句r2 = r1时，只有引用(地址)被复制。
    如果r1的值被改变了，那么这个值的所有引用都会指向被修改后的内容，在这个例子中，r2也会受到影响。
4. 简短形式，使用 := 赋值操作符
    我们知道可以在变量的初始化时省略变量的类型而由系统自动推断，声明语句写上var关键字其实是显得有些多余了，因此我们可以将它们简写为 a := 50 或 b := false。
    a和b的类型(int和bool)将由编译器自动推断。
    这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。

    注意事项：
        如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如： a := 20就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是a=20是可以的，因为这是给相同的变量赋予一个新的值。
        如果在定义变量a之前使用它，则会得到编译错误undefined: a。
        如果声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误。
        但是全局变量是允许声明但不是用的。
        同一类型的多个变量声明可以在一行，如：
        var a, b, c int
        多个变量可以在同一行进行赋值(类型可以不同，但得一一对应)，如：
        var a, b int
        var c string
        a, b, c = 5, 7, "abc"
        上面这行代码，假设了a,b和c都已经被声明，否则的话应该这样使用：
            a, b, c := 5, 7, "abc"
            右边的这些值以相同的顺序赋值给左边的变量，所以a的值是5，b的值是7，c的值是"abc"。
            这行被称为 并行或同时赋值。
        如果想要交换两个变量的值，则可以简单地使用 a, b = b, a，两个变量的类型必须相同。
        空白标识符 _ 也被用于抛弃值，如值5在： _, b = 5, 7 中被抛弃。
        _ 实际上是一个只写变量，我们不能得到它的值。这样做是因为Go语言中我们必须使用所有被声明的变量，但有时我们并不需要使用从一个函数得到的所有返回值。
        并行赋值也被用于当一个函数返回多个返回值时，比如这里的val和错误err是通过调用Func1函数同时得到：val, err = Func1(var1)。