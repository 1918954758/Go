Go语言Map集合
    Map是一种无需的键值对集合。Map最重要的一点是通过key来快速检索数据，key类似于索引，指向数据的值。
    Map是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map是无序的，我们无法决定它的返回顺序，这是因为Map是使用hash来实现的。
1. 定义Map
    定义：
    //声明变量，默认map是nil
    var map_variable map[key_data_type]value_data_type
    //使用make内置函数定义map
    map_variable := make(map[key_data_type]value_data_type)
    如果不初始化map，那么就会创建一个nil map。nil map不能用来存放键值对。
    实例：
    package main
    import "fmt"
    func main() {
    	var countryCapitalMap map[string]string	//如此声明map是不可以放数据的
    	//countryCapitalMap := make(map[string]string)	//如此，使用make来声明的map是可以放数据的
    	countryCapitalMap["France"] = "巴黎"
    	countryCapitalMap["Italy"] = "罗马"
    	countryCapitalMap["Japan"] = "东京"
    	countryCapitalMap["India"] = "新德里"

    	//使用键输出地图值
    	for country := range countryCapitalMap {
    		fmt.Println(country, "首都是", countryCapitalMap[country])
    	}
    	//查看元素在集合中是否存在
    	capital, ok := countryCapitalMap["American"]	//如果确定是真实的，则存在，否则不存在
    	if ok {
    		fmt.Println("American的首都是", capital)
    	} else {
    		fmt.Println("American的首都不存在", capital)
    	}
    }
2. delete函数
    delete()函数用于删除集合的元素，参数为map和其对应的key。实例：
    package main
    import "fmt"
    func main() {
        //创建map
        countryCapitalMap := map[string]string{"France":"Paris", "Italy":"Rome", "Japan":"Tokyo", "India":"New delhi"}
        fmt.Println("原始地图")
        //打印地图
        for country := range countryCapitalMap {
            fmt.Println(country, "首都是", countryCapitalMap[country])
        }
        //删除元素
        delete(countryCapitalMap, "France")
        fmt.Println("法国条目被删除")
        fmt.Println("删除元素后地图")
        //打印地图
        for country := range countryCapitalMap {
            fmt.Println(country, "首都是", countryCapitalMap[country])
        }
    }
    //output=> 原始地图
               France 首都是 Paris
               Italy 首都是 Rome
               Japan 首都是 Tokyo
               India 首都是 New delhi
               法国条目被删除
               删除元素后地图
               Italy 首都是 Rome
               Japan 首都是 Tokyo
               India 首都是 New delhi
