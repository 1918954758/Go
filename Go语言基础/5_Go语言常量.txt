Go语言常量
    常量是一个简单值的标识符，在程序运行时，不会被修改。
    常量中的数据类型只可以是布尔、数字型(整数型、浮点型和复数)和字符串。
    常量的定义格式：
        const indentifier [type] = value
    我们也可以省略类型说明符[type]，因为编译器可以更具变量的值累推断其类型。
        显式类型定义 const b string = "abc"
        隐式类型定义 const b = "abc"
    多个相同类型声明可以简写为：
        const c_name1, c_name2, c_name3 = value1, value2, value3
    常量应用的例子见 GoVariable5.go

    常量还可以用作枚举：
    const (
        Unknown = 0     //未知性别
        Female = 1      //女性
        Male = 2        //男性
    )
    常量可以用len(), cap(), unsafe(), Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不通过：
    例子见 GoVariable6.go

1. iota
    iota，特殊的常量，可以认为是一个可以被编译器修改的常量。
    iota在const关键字出现时将被重置为0(const内部的第一行之前)，const中每新增一行常量声明将使iota计数一次(iota可以理解为const语句块中的行索引)。
    iota可以被用作枚举值：
        const (
            a = iota
            b = iota
            c = iota
        )
        第一个iota的值等于0，每当iota在新的一行被使用时，它的值都会自动加1；所以a = 0, b = 1, c = 2可以简写为以下形式：
        const (
            a = iota
            b
            c
        )
        例：
        package main
        func main() {
        	const (
        		a = iota		// 0
        		b				//1
        		c				//2
        		d = "ha"		//独立值， iota += 1
        		e				//ha	iota += 1
        		f = 100			//100   iota += 1
        		g				//
        		h = iota		//7  iota恢复计数
        		i
        	)
        	println(a, b, c, d, e, f, g, h ,i)
        	//output=> 0 1 2 ha ha 100 100 7 8
        }
        注意：在定义常量时，如果没有给定初始值，则表示使用上一行的表达式的值，比如e = "ha" 和 g = 100
        测试案例，见GoVariable7.go
        例：
        package main
        import "fmt"
        const (
            i = 1 << iota
            j = 3 << iota
            k
            l
        )
        func main () {
            fmt.Println("i = ", i)
            fmt.Println("j = ", j)
            fmt.Println("k = ", k)
            fmt.Println("l = ", l)
            //output=> 1 6 12 24
        }
        iota表示从0开始自动加1，所以i = 1 << 0，j = 3 << 1(<< 表示左移)，即：i = 1，j = 6，这没问题，关键在k和l，从输出结果看k = 3 << 2，l = 3 << 3
        简单表述：
        i = 1:左移0位，不变仍为1；
        j = 3:左移1位，由二进制0011变为二进制0110，即6
        k = 3:左移2位，由二进制0011变为二进制1100，即12
        l = 3:左移3位，由二进制0011变为二进制11000，即24
        注意： <<n == *(2^n)
               >>n == /(2^n)

2. 后记
    笔记1：
        a = "abcdesfd"
        unsafe.Sizeof(a)
        输出结果位16
        字符串类型在go里面是个结构，包含指向底层数组的指针和长度，这两部分每部分都是8个字节，所以字符串类型大小位16个字节
    笔记2：
        iota只是在同一个const常量组内递增，每当有新的const关键字时，iota计数会重新开始。
        package main
        const (
            i = iota
            j
            x
        )
        const xx = iota
        const yy = iota
        func main () {
            println(i, j, x, xx, yy)
            //output=> 0 1 2 0 0
        }
    笔记3:
        << 是双目运算符。左移n位就是乘以2的n次方。
            其功能是把<<左边的运算数的各二进位全部左移若干位，由<<右边的数指定移动的位数，高位丢弃，地位补0.
        >> 是双目运算符。右移n位就是除以2的n次方。
            其功能是把>>左边的运算数的各二进位全部右移若干位，>>右边的数指定移动的位数
        十   十六    二
        0     0     0000
        1     1     0001
        2     2     0010
        3     3     0011
        4     4     0100
        5     5     0101
        6     6     0110
        7     7     0111
        8     8     1000
        9     9     1001
        10    A     1010
        11    B     1011
        12    C     1100
        13    D     1101
        14    E     1110
        15    F     1111
        16          10000
        17          10001
        18          10010
        19          10011
        20          10100
        21          10101
        22          10110
        23          10111
        24          11000